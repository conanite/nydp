(chapter-start 'hash-manipulation "utilities for manipulating, accessing and altering hash objects")

; return values for each key in hash 'h
(def hash-values (h)
  (map 位k(hash-get h k)
       (hash-keys h)))

; (auto-hash a b c) same as { a a b b c c }
(mac auto-hash names
  `(brace-list ,@(flatten:map 位n(list n n) names)))

;; like 'map, but for a hash instead of a list ; provided function 'f takes three arguments,
;; a key, the corresponding value from the given hash, and the index of the item in the list
(def map-hash (f h pre)
  (map-with-index 位ki(f k (hash-get h k) i)
                  ((or pre x1) (hash-keys h))))

;; returns a new hash with the same keys as the given hash, with each value transformed by
;; the given function 'f
;; 'f takes three arguments:
;; k, the key
;; v, the value
;; i, the index
;;
(def hash-transform-values (f h pre)
  (returnlet newh {}
    (map-hash 位kvi(hash-set newh k (f k v i)))))


;; Return a new hash where keys are (map f things) and values are the corresponding things.
;; No attempt is made to avoid clobbering items. Use 'group-by if there are duplicate keys.
(def hashify (f things)
  (returnlet hsh {}
             (each thing things
                   (hash-set hsh (f thing) thing))))

;; return a new hash containing all the values of the given
;; hash, but with each corresponding key 'k replaced by (f k)
(def hash-replace-keys (f hsh)
  (returnlet newh {}
    (each k (hash-keys hsh)
      (hash-set newh (f k) (hash-get hsh k)))))

;; repeatedly assigns an element of hash-keys of 'things to 'kvar,
;; assign the corresponding value to 'vvar
;; and executes 'body for each key-value pair
;; return value of form is whatever the last line of 'body returns
(mac hash-each (kvar vvar things . body)
  (w/uniq xs
    `(let ,xs ,things
       (each ,kvar (hash-keys ,xs)
         (let ,vvar (hash-get ,xs ,kvar)
           ,@body)))))
