
(hash-set macs 'if (fn args
                       (cond args
                             (cond (cdr args)
                                   (cond (cddr args)
                                         `(cond ,(car args) ,(cadr args) (if ,@(cddr args)))
                                         `(cond ,(car args) ,(cadr args)))
                                   (car args))
                             nil)))

(def map (f things)
  ; transforms the list 'things by applying 'f to each item
  ; returns the resulting list
  (if (pair? things)
      (cons (f (car things)) (map f (cdr things)))
      things
      (f things)))

(def hash-cons (h k v)
  ; push 'v onto the value for 'k in 'h
  (hash-set h k (cons v (hash-get h k))))

(def rev-accum (things acc)
  (cond things
        (rev-accum (cdr things)
                   (cons (car things)
                         acc))
        acc))

(def rev (things) (rev-accum things nil))
