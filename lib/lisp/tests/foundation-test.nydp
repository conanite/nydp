(register-test '(suite "Foundation Tests"
  (suite "strings"
    (suite "string-split"
      ("splits a string using given expression"
        (string-split "a and b and c and d" " and ")
        ("a" "b" "c" "d")))

    (suite "string-replace"
      ("replaces parts of a string with the given replacement"
        (string-replace "and" "or" "a and b and c and d")
        "a or b or c or d"))

    (suite "type-of"
      ("returns 'string"
        (type-of "foobar")
        string)

      ("interpolates a string"
        "foobar ~(+ 1 2) you know"
        "foobar 3 you know")

      ("returns 'string for an interpolated string"
        (type-of "foobar %%(+ 1 2)")
        string)))

  (suite "eq?"
         ("true for two empty symbols"
          (eq? '|| '||)
          t)

         ("nil for two different symbols"
          (eq? 'foo 'bar)
          nil))

  (suite "truth and nil"
         ("t is boolean true"
          (if t "hello" "goodbye")
          "hello")

         ("nil is boolean false"
          (if nil "hello" "goodbye")
          "goodbye")

         ("t is Truth"
          (type-of t)
          truth)

         ("nil is nil"
          (type-of nil)
          nil))

  (suite "Error handling"
    ("'ensuring gets called on the way out"
      (let x 10
        (ensuring (fn () (assign x (+ x 11)))
                  (fn () (assign x (+ x 22))))
        x)
      43)

    ("'on-err handles errors"
      (let x nil
        (on-err (fn (ex) (= x "impossible") )
                (fn ()   (= x (nil nil nil))))
        x)
      "impossible")

)

  (suite "assignment with '="
    ("assigns a symbol"
      (pre-compile '(= this 'that))
      (assign this 'that)))

  (suite "hash"
    ("hash-lookup"
     (pre-compile 'a.b.c)
     (hash-get (hash-get a 'b) 'c))

    ("hash assignment"
     (pre-compile '(= a.b 42))
     (hash-set a 'b 42))

    ("recursive hash assignment"
     (pre-compile '(= a.b.c.d 42))
     (hash-set (hash-get (hash-get a 'b) 'c) 'd 42)))

  (suite "isa"
    ("t for 'pair for list"
      (isa 'pair '(a b c))
      t)
    ("nil for 'pair for non-list"
      (isa 'pair 42)
      nil)
    ("t for 'symbol for symbol"
      (isa 'symbol 'foo)
      t)
    ("nil for 'symbol for non-symbol"
      (isa 'symbol "foo")
      nil)
    ("t for 'string for string"
      (isa 'string "foo")
      t)
    ("nil for 'string for string"
      (isa 'string '(a b c))
      nil))

  (suite "Lists"
    (suite "cons"
      ("cons creates a list"
        (cons 'a '(b c))
        (a b c))

      ("cons conses two strings"
        (cons "a" "b")
        ("a" . "b"))

      ("len returns length of proper list"
        (len (cons "a" (cons "b" nil)))
        2)

      ("type-of returns pair"
        (type-of (cons "a" "b"))
        pair))

    (suite "car"
      ("car of nil is nil"
        (car nil)
        nil)

      ("car of empty list is nil"
        (car '())
        nil)

      ("car - no need to quote empty list"
        (car ())
        nil)

      ("car returns car of argument"
        (car '(foo 12.34 "bar"))
        foo)
    ))))
