(examples-for pp/indent
  ("nothing"
   (pp/indent nil (list " "))
   (" "))

  ("number"
   (pp/indent 22 (list " "))
   ("  " " "))

  ("string"
   (pp/indent "forty-two" (list " "))
   ("         " " "))

  ("symbol"
   (pp/indent 'forty-two (list " "))
   ("         " " "))

  ("list"
   (pp/indent '(fn (x) (blow x)) (list " "))
   (" ")))

(examples-for pp/cleanup
  ("empty"
   (pp/cleanup "")
   "")

  ("atom"
   (pp/cleanup "foo")
   "foo")

  ("already clean"
   (pp/cleanup "foo\nbar")
   "foo
bar")

  ("removes trailing whitespace on each line"
   (pp/cleanup "foo  \nbar   \ntoto    ")
   "foo
bar
toto")

)

(examples-for pp/unsyntax
  ("nil"
   (to-string:pp/unsyntax nil)
   "")

  ("atom"
   (to-string:pp/unsyntax 42)
   "42")

  ("list"
   (to-string:pp/unsyntax '(for a 1 10 (p 'hello 'world)))
   "(for a 1 10 (p 'hello 'world))")

  ("list with embedded syntax"
   (to-string:pp/unsyntax '(for (colon-syntax a b) 1 10 ((dot-syntax p q) 'hello 'world)))
   "(for a:b 1 10 (p.q 'hello 'world))")

  ("percent-syntax"
   (to-string:pp/unsyntax '(percent-syntax this that))
   "this%that")

  ("prefix percent-syntax"
   (to-string:pp/unsyntax '(percent-syntax || that))
   "%that")

  ("postfix percent-syntax"
   (to-string:pp/unsyntax '(percent-syntax this ||))
   "this%")

  ("postfix multiple percent-syntax"
   (to-string:pp/unsyntax '(percent-syntax this that || another))
   "this%that%%another")

  ("nested syntax"
   (to-string:pp/unsyntax '(percent-syntax this (ampersand-syntax x y) that))
   "this%x&y%that"))

(examples-for pp/split-form
  ("first item"
   (pp/split-form '(a b c d) 1)
   ((a) (b) (c) (d)))

  ("first two items"
   (pp/split-form '(a b c d e) 2)
   ((a b) (c) (d) (e)))

  ("first three items"
   (pp/split-form '(a b c d e f) 3)
   ((a b c) (d) (e) (f))))

(examples-for pp/flatly
  ("nil"
   (pp/flatly nil)
   "nil")

  ("number"
   (pp/flatly 22)
   "22")

  ("symbol"
   (pp/flatly 'qwerty)
   "qwerty")

  ("list"
   (pp/flatly '(a b c d 21 22 23 'quoting) )
   "(a b c d 21 22 23 'quoting)")

  ("macro example"
   (pp/flatly '(mac johnny (foo bar) `(this ,foo ,@(map twisty bar))))
   "(mac johnny (foo bar) `(this ,foo ,@(map twisty bar)))"))

(examples-for pp
  ("a macro invocation"
   (pp '(mac pp/def (name args . body) `(hash-set pp/special-forms ',name (fn ,args ,@body))))
   "(mac pp/def (name args body)\n    `(hash-set pp/special-forms ',name (fn ,args ,@body)))")

  ("a 'def invocation"
   (pp '(def pp (form) (pp/main form 0)))
   "(def pp (form) (pp/main form 0))")

  ("a longer 'def invocation"
   (pp '(def pp (form)
          (pp/main form 0)
          (pp/again form 1)
          (pp/more (jump:skip form) 2)))
   "(def pp (form) (pp/main form 0))")

)

;;   ("something with a plain string literal"
;;    (pp '(def yoohoo (it) (wrangle "foobar" it)))
;;    "(def yoohoo (it)\n    (wrangle \"foobar\" it))")

;;   ("combined with dox system"
;;    (pp:dox-src 'pp/find-breaks)
;;    "(def pp/find-breaks (form)
;;     (if (eq? 'if (car form))
;;       (let if-args (cdr form)
;;         (cons (list 'if (car if-args)) (map list (cdr if-args))))
;;       (or
;;         (pp/find-breaks/mac form)
;;         (list form))))")

;;   ("special syntax"
;;    (pp '(string-pieces "hello " (bang-syntax || (dot-syntax x y (ampersand-syntax foo bar))) " and welcome to " (prefix-list "%%" (a b c d)) " and friends!"))
;;    "\"hello ~~!x.y.foo&bar and welcome to ~~%%(a b c d) and friends!\"")

;;   ("percent-syntax"
;;    (pp '(percent-syntax || (dot-syntax x y)))
;;    "%x.y")

;;   ("brace list"
;;    (pp '(&x {a 1 b "two" c 'three d ,four e (sub invocation) f {sub brace list} }))
;;    "(&x {a 1 b \"two\" c 'three d ,four e (sub invocation) f {sub brace list}})"))
