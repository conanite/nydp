; -*- lisp -*-

(assign last-cons (fn (xs)
  (cond (pair? (cdr xs))
        (last-cons (cdr xs))
        xs)))

(assign append-list! (fn (list-1 list-2)
  (cdr-set (last-cons list-1) list-2)
  list-1))

(assign list (fn args args))

(assign caar (fn (arg) (car (car arg))))
(assign cadr (fn (arg) (car (cdr arg))))
(assign cddr (fn (arg) (cdr (cdr arg))))
(assign   no (fn (arg) (eq? arg nil)))
(assign just (fn (arg) arg))

(assign mac-expand (fn (macfn name body)
  (cond macfn
        (pre-compile-do (apply macfn body))
        (cons name body))))

(assign macs (hash))

(assign pre-compile-expr (fn (name body)
  (mac-expand (hash-get macs name) name body)))

(assign pre-compile-each
        (fn (args)
            (cond args
                  (cond (pair? args)
                        (cons (pre-compile-do (car args))
                              (pre-compile-each (cdr args)))
                        args))))

(assign pre-compile-msg
        (fn args
            (cond *debug-pre-compile* (apply p args) (car args))))

(assign pre-compile-do
        (fn (arg)
            (cond (pair? arg)
                  (cond (eq? (car arg) 'quote)
                        arg
                        (pre-compile-each (pre-compile-expr (car arg) (cdr arg))))
                  arg)))

(assign pre-compile
        (fn (arg)
            (pre-compile-msg "pre-compile" arg)
            (pre-compile-msg (pre-compile-do arg))))

(hash-set macs 'def
          (fn (name args . body)
              (list 'assign
                    name
                    (+ (list 'fn args)
                       body))))

(def qq-unquote-recurse (arg rest)
        (list 'cons
              (qq-quasiquote arg)
              (qq-quasiquote rest)))

(def qq-unquote? (arg rest)
     (cond (pair? arg)
           (cond (eq? (car arg) 'unquote)
                 (list 'cons (cadr arg) (qq-quasiquote rest))
                 (cond (eq? (car arg) 'unquote-splicing)
                       (cond (no rest)
                             (cadr arg)
                             (list '+
                                   (cadr arg)
                                   (qq-quasiquote rest)))
                       (qq-unquote-recurse arg rest)))
           (list 'cons
                 (list 'quote arg)
                 (qq-quasiquote rest))))

(def qq-quasiquote (xs)
     (cond (no xs)
           nil
           (cond (pair? xs)
                 (cond (eq? (car xs) 'unquote)
                       (cadr xs)
                       (qq-unquote? (car xs) (cdr xs)))
                 (list 'quote xs))))

(hash-set macs 'quasiquote (fn (arg)
  (qq-quasiquote arg)))

(hash-set macs 'mac (fn (name args . body)
  `(hash-set macs ',name (fn ,args ,@body))))

(mac if args
     (cond (no args) nil
           (cond (cadr args)
                 (cond (cddr args)
                       `(cond ,(car args) ,(cadr args) (if ,@(cddr args)))
                       `(cond ,(car args) ,(cadr args)))
                 (car args))))

(mac and args
  (if args
      (if (cdr args)
          `(if ,(car args) (and ,@(cdr args)))
          (car args))
      't))

(mac do args
  `((fn nil ,@args)))

(mac when (condition . body)
  `(cond ,condition (do ,@body)))

(def map (f things)
  (if (no things)
      nil
    (pair? things)
    (cons (f (car things)) (map f (cdr things)))
    (map f (list things))))

(def pairs (things)
     (if (no things)       nil
       (no (cdr things)) (list (list (car things)))
       (cons (list (car things) (cadr things))
             (pairs (cddr things)))))

(mac with (parms . body)
     `((fn ,(map car (pairs parms))
           ,@body)
       ,@(map cadr (pairs parms))))

(mac let (var val . body)
     `(with (,var ,val) ,@body))

(def each (f acc things)
  (if things
      (each f (f acc (car things)) (cdr things))
      acc))

(def eachr (f things)
     (when things
       (eachr f (cdr things))
       (f (car things))))

(def zip (a b)
  (if a
      (cons (list (car a) (car b))
            (zip (cdr a) (cdr b)))))

(def flatten (things)
  (let acc nil
       (let flattenize nil
            (assign flattenize (fn (x)
                                   (if (pair? x)
                                       (do
                                           (eachr flattenize (cdr x))
                                           (flattenize (car x)))
                                     (assign acc (cons x acc)))))
            (flattenize things))
       acc))

(def joinstr (txt things)
     (apply +
            (to-string (car things))
            (flatten (zip (map (fn (_) txt) (cdr things))
                          (map to-string (cdr things))))))

(let uniq-counter 0
     (def uniq (prefix)
          (sym (joinstr "-"
                        (list prefix
                              (assign uniq-counter
                                      (+ uniq-counter 1))))))
     (def reset-uniq-counter ()
          (assign uniq-counter 0)))

(def debug-pre-compile (arg)
     (assign *debug-pre-compile* arg))


(mac w/uniq (vars . body)
     (pre-compile-msg "w/uniq: vars :" vars)
     (pre-compile-msg "w/uniq: body :" body)
     (if (pair? vars)
         `(with ,(apply + (map (fn (n) (list n '(uniq ',n))) vars))
                ,@body)
       `(let ,vars (uniq ',vars) ,@body)))

(mac push (x things)
  `(assign ,things (cons ,x ,things)))


(mac or args
     (cond args
           (w/uniq ora
                   `(let ,ora ,(car args)
                         (cond ,ora ,ora (or ,@(cdr args)))))))

;; (debug-pre-compile t)
;; (pre-compile (or a b c d e))
;; (debug-pre-compile nil)

(mac pop (xs)
  (w/uniq gp
  `(let ,gp (car ,xs)
     (assign ,xs (cdr ,xs))
     ,gp)))

(def nth (n things)
     (if (eq? n 0)
         (car things)
       (nth (- n 1) (cdr things))))


(def iso (x y)
  (or (eq? x y)
      (and (pair? x)
           (pair? y)
           (iso (car x) (car y))
           (iso (cdr x) (cdr y)))))
