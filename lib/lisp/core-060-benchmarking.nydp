(def bm-pythag ()
  (for i 1 50
    (for j 1 50
      (sqrt (+ (* i i) (* j j))))))

(def bm-repeat (f n)
  (for b 1 n (f)))

(def bm (desc f repeats iterations)
     (p "\n================================================")
     (p "Benchmark: ~desc - ~repeats runs of ~iterations iterations each")
     (let times 0
          (for reps 1 repeats
               (let started (time)
                    (bm-repeat f iterations)
                    (let elapsed (- (time) started)
                         (assign times (+ elapsed times))
                         (p "  took: ~elapsed ms, ~(/ elapsed iterations) ms per iteration"))))
          (p "total ~(just times), average ~(/ times repeats) per run")
          (p "================================================\n")
          "~desc : total ~(just times), average ~(/ times repeats) per run"))


(def bm-0-arg-times-call () (*))
(def bm-1-arg-times-call () (* 23))
(def bm-2-arg-times-call () (* 23 24))
(def bm-3-arg-times-call () (* 23 24 25))
(def bm-4-arg-times-call () (* 23 24 25 26))

(def bm-complicated-0 (a b c) (a (+ 1 b) (+ 1 c)))

(def bm-complicated ()
  (bm-complicated-0 +
                    (bm-complicated-0 * 3 (bm-complicated-0 + 3 6))
                    (bm-complicated-0 - 10 (bm-complicated-0 - 13 8))))

(def bm-pre-compile-test ()
  (for i 1 10
       (pre-compile (dox-src rbs))))

(def bm-hash-fill
  (let h {}
    (=h.aa 1) (=h.ab 2) (=h.ac 3) (=h.ba 4) (=h.bb 5) (=h.bc 6)
    (=h.ca 1) (=h.cb 2) (=h.cc 3) (=h.ca 4) (=h.cb 5) (=h.cc 6)
    (=h.da 1) (=h.db 2) (=h.dc 3) (=h.da 4) (=h.db 5) (=h.dc 6)
    (=h.aa 1) (=h.ab 2) (=h.ac 3) (=h.ba 4) (=h.bb 5) (=h.bc 6)
    (=h.ca 1) (=h.cb 2) (=h.cc 3) (=h.ca 4) (=h.cb 5) (=h.cc 6)
    (=h.da 1) (=h.db 2) (=h.dc 3) (=h.da 4) (=h.db 5) (=h.dc 6)
    (list (list h.aa h.ab h.ac h.ba h.bb h.bc)
          (list h.aa h.ab h.ac h.ba h.bb h.bc)
          (list h.ca h.cb h.cc h.ca h.cb h.cc)
          (list h.da h.db h.dc h.da h.db h.dc)
          (list h.aa h.ab h.ac h.ba h.bb h.bc)
          (list h.ca h.cb h.cc h.ca h.cb h.cc)
          (list h.da h.db h.dc h.da h.db h.dc)
          (list h.da h.ab h.ac h.ba h.bb h.bc))))

(def rbs (name)
  (let summary nil
    ;; (push (bm "pythag     "   bm-pythag            5     10) summary)
    ;; (push (bm "recursive  "   bm-complicated       5   1000) summary)
    ;; (push (bm "0 arg times"   bm-0-arg-times-call  5   1000) summary)
    ;; (push (bm "1 arg times"   bm-1-arg-times-call  5   1000) summary)
    ;; (push (bm "2 arg times"   bm-2-arg-times-call  5   1000) summary)
    ;; (push (bm "3 arg times"   bm-3-arg-times-call  5   1000) summary)
    ;; (push (bm "4 arg times"   bm-4-arg-times-call  5   1000) summary)
    ;; (push (bm "pre-compile"   bm-pre-compile-test 10  10000) summary)
    (push (bm "hashing"       bm-hash-fill 10  200000) summary)
    (each s summary (p name " " s))))
