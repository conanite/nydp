(assign pp/special-forms (hash))
(assign pp/syntaxes      (hash))
(assign pp/newline       (uniq 'newline))
(assign pp/newline/noi   (uniq 'newline/noi))

(def pp/esc-ch (char)
  (if (eq? char "\"") "\\\""
      (eq? char "\~") "\\\~"
      (eq? char "\\") "\\\\"
      (eq? char "\n") "\\n"
      char))

(def pp/esc-str-literal (txt)
  (joinstr "" (map pp/esc-ch (string-split txt))))

(def pp/string-piece (thing)
  (if (isa 'string thing) (pp/esc-str-literal thing)
      "\~~(pp thing)"))

(def pp/string-pieces (things) "\"~(joinstr "" (map pp/string-piece things))\"")

(def pp/kv (hsh)
  (map λk(joinstr " "
                  (pp k)
                  (pp hsh.,k))
       (hash-keys hsh)))

(def pp/literal (thing)
  (if (eq? thing '||)
      ""
      (isa 'string thing)
      "\"~(pp/esc-str-literal thing)\""
      (isa 'hash thing)
      "{ ~(joinstr " " (pp/kv thing)) }"
      (inspect thing)))

(mac pp/def (name args . body)
  ; define a pretty-printer function for forms beginning with the
  ; given name. 'args are usually (form indent), form being the
  ; complete form for pretty-printing, and indent being the current
  ; indent level.
  `(do
       (hash-set pp/special-forms ',name
                 (fn ,args ,@body))
       (dox-add-doc ',name
                    'pp/def
                    (list "pretty-printer for forms starting with ~(quote ,name)")
                    ',args
                    '(pp/def ,name ,args ,@body))))

(mac pp/syntax syntaxes
  (if syntaxes
      `(do (pp/def ,(car syntaxes) (form indent)
                   (joinstr ,(cadr syntaxes) (map pp (cdr form))))
           (pp/syntax ,@(cddr syntaxes)))))

(pp/def string-pieces    (pp form indent) (pp/string-pieces (cdr form)))
(pp/def quasiquote       (pp form indent) "`~(pp (cadr form) (list " " indent))" )
(pp/def quote            (pp form indent) "'~(pp (cadr form) (list " " indent))" )
(pp/def unquote          (pp form indent) ",~(pp (cadr form) (list " " indent))" )
(pp/def unquote-splicing (pp form indent) ",@~(pp (cadr form) (list "  " indent))")
(pp/def comment          (pp form indent) ";~(cadr form)\n")
(pp/def prefix-list      (pp form indent) "~(cadr form)~(pp (caddr form))")
(pp/def brace-list       (pp form indent) "{ ~(pp/inline (cdr form) (list "  " indent)) }")

(pp/syntax
 percent-syntax "%"
 colon-syntax ":"
 dot-syntax   "."
 bang-syntax  "!"
 ampersand-syntax "&"
 dollar-syntax "$"
 colon-colon-syntax "::"
 arrow-syntax "->"
 rocket-syntax "=>" )

(def pp/spaces (n) (if (> n 0) " ~(pp/spaces (- n 1))" ""))

(def pp/dotify (form)
  (if (pair? (cdr form))
      (cons (car form) (pp/dotify (cdr form)))
      (no:cdr form)
      form
      (list (car form) '. (cdr form))))

(def pp/find-breaks/mac (form)
  (if (eq? (dox-what-is? (car form)) 'mac)
      (pp/split-form form (list-length:dox-args:car form))))

(def pp/split-form (form n)
  (cons (firstn n form)
        (map list (nthcdr n form))))

(def pp/flatly (form)
  (if (pair? form)
      (let special (hash-get pp/special-forms (car form))
        (if special
            (special pp/flatly form nil)
            "(~(joinstr " " (map pp/flatly form)))"))
      (pp/literal form)))

(def pp/breaks? (form))

(def pp/breaker (form)
  (let key (car form)
    (if (eq? 'if (car form))
        (let if-args (cdr form)
          (cons (list 'if (car if-args)) (map list (cdr if-args))))
        (or (pp/find-breaks/mac form)
            (list form)))))

(def pp/inline (forms indent)
  (joinstr " " (map λf(pp f (+ indent 1)) forms)))

(def pp/pair (form indent)
  (let special-form (hash-get pp/special-forms (car form))
    (if special-form
        (special-form form indent)
        (let form-with-breaks (pp/find-breaks form)
          "(~(joinstr "\n~(pp/spaces (+ 4 indent))" (map λf(pp/inline f (+ indent 1)) (pp/dotify form-with-breaks))))"))))

(def pp/main (form indent)
  (if (pair? form) (pp/pair form indent)
      (pp/literal form)))

(def pp/elt (form))

(def pp/printer (form indent)
  (pprint (intersperse-splicing (pp/breaker form)) indent))

(def pp (form) (pp/printer form nil))
(def pp (form) (inspect form))

(def dox-show-src (src)
  ; use the pretty-printer to elegantly display the given source code
  (pp src))
