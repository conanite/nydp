(dox-add-doc 'cons  'def '("with args a and b, returns a new cons cell, (a . b)")                                                                            '(a b) nil)
(dox-add-doc 'car   'def '("with args a, where a is a cons cell (x . y), return x." "Commonly used to get the first element of a list")                      '(a) nil)
(dox-add-doc 'cdr   'def '("with args a, where a is a cons cell (x . y), return y." "Commonly used to get contents of a list, excluding the first element")  '(a) nil)
(dox-add-doc '+     'def '("with rest-args things, return the sum of the elements of things." "Will also increment dates and concatenate strings and lists") 'things nil)
(dox-add-doc '-     'def '("return the result of subtracting all other args from the first arg." "(- a b c d) is equivalent to (- a (+ b c d))")             'things nil)
(dox-add-doc '*     'def '("with rest-args things, return the product of the elements of things.")                                                           'things nil)
(dox-add-doc '/     'def '("return the result of dividing all other args into the first arg." "(/ a b c d) is equivalent to (/ a (* b c d))")                'things nil)
(dox-add-doc '>     'def '("true if each arg is greater than the next arg")                                                                                  'things nil)
(dox-add-doc '<     'def '("true if each arg is less than the next arg")                                                                                     'things nil)
(dox-add-doc 'mod   'def '("return the remainder after diving a by b")                                                                                       '(a b) nil)
(dox-add-doc 'eval  'def '("evaluate the given lisp expression")                                                                                             '(expr) nil)
(dox-add-doc 'hash  'def '("create a new Hash instance")                                                                                                     nil nil)
(dox-add-doc 'apply 'def '("invoke f with args 'args")                                                                                                       '(f . args) nil)
(dox-add-doc 'date  'def '("create a new date instance")                                                                                                     '(year month day) nil)
(dox-add-doc 'error 'def '("raise an exception")                                                                                                             'args nil)
(dox-add-doc 'parse 'def '("parse the given string and return the corresponding lisp objects")                                                               '(str) nil)
